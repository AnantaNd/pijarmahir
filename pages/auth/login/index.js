import { signIn } from 'next-auth/react';
import Head from 'next/head';
import Image from 'next/image';
import Link from 'next/link';
import { useRouter } from "next/router";
import React, { useState } from 'react';
import CardLogin from '../../../components/Card/CardLogin/CardLogin';
import FooterSecond from '../../../components/Footer/FooterSecond/FooterSecond';
import Styles from './Login.module.css';


function Login({ users }) {
  const [email, setEmail] = useState('')
  const [pass, setPass] = useState('')
  const [errorPass, setErrorPass] = useState("")
  const [errorEmail, setErrorEmail] = useState("")
  const router = useRouter()


  const handleInputEmail = (e) => {
    setEmail(e.target.value)
  }
  const handleInputPass = (e) => {
    setPass(e.target.value)
    console.log(pass.length)
  }

  const handleLogin = (e) => {
    e.preventDefault();
    if (email === '') {
      setErrorEmail('isi terlebih dahulu email')
    } else if (!email.includes('@')) {
      setErrorEmail('email harus memilik karakter @')
    } else if (!email.includes('@gmail.com')) {
      setErrorEmail('email tidak valid')
    } else {
      setErrorEmail('')
    }

    if (pass === '') {
      setErrorPass('isi password terlebih dahulu')
      console.log('pass empty')
    } else if (pass.length < 4) {
      console.log('pass length')
      setErrorPass('password harus memiliki minimal 4 karakter')
    } else {
      setErrorPass('')
    }

    // mapping email 
    users.data?.map((user, id) => {
      if (user.email !== email && user.password !== pass) {
        if (email === '') {
          setErrorEmail('isi terlebih dahulu email')
        } else if (!email.includes('@')) {
          setErrorEmail('email harus memilik karakter @')
        } else if (!email.includes('@gmail.com')) {
          setErrorEmail('email tidak valid')
        } else {
          setErrorEmail("Email yang dimasukkan tidak terdaftar")
        }

        if (pass === '') {
          setErrorPass('isi password terlebih dahulu')
          console.log('pass empty')
        } else if (pass.length < 4) {
          console.log('pass length')
          setErrorPass('password harus memiliki 4 karakter')
        } else {
          setErrorPass('')
        }
        router.push('/')
      } else if (user.email === email && user.password !== pass) {
        setErrorPass("Password yang dimasukkan salah")
        setErrorEmail("")
      } else if (user.email !== email && user.password === pass) {
        setErrorEmail("Email yang dimasukkan tidak terdaftar")
        setErrorPass("")
      } else {
        localStorage.setItem('login', JSON.stringify({
          id,
          username: user.username,
          email: email,
        }))
        console.log("Berhasil")
        setErrorPass("")
        setErrorEmail("")
        stop()
      }


    })
  }


  const handleLoginFacebook = (e) => {
    e.preventDefault();
    signIn('facebook', {
      callbackUrl: '/'
    });
  }

  const handleLoginGoogle = (e) => {
    e.preventDefault();
    signIn('google', {
      callbackUrl: '/'
    });
  }
  return (
    <>
      <Head>
        <title>Pijar | Login</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/pijar_logo.svg" />
      </Head>
      <main className={Styles.container_login}>
        <Link href="/">
          <Image alt="logo" className={Styles.logo} src="/pijar_logo.svg" height={80} width={80} style={{ marginLeft: "auto", marginRight: "auto" }} />
        </Link>
        <div className={Styles.login_content}>
          <Image alt="ilustration" className={Styles.login_ilustration} src="/new-profile.svg" priority={true} width={480} height={480} />
          <CardLogin/>
        </div>
      </main>
      <FooterSecond />
    </>
  )
}

export default Login

export async function getStaticProps() {
  try {
    const res = await fetch('http://localhost:9000/api/v1/user/');
    const users = await res.json();
    return {
      props: { users }
    }
  } catch (err) {
    console.error(err)
  }
  return {
    props: { users: [] }
  }
}